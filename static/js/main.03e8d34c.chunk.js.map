{"version":3,"sources":["getAllPossibleMachineDefs.js","pseudostyler.js","ButtonsPreview.js","App.js","reportWebVitals.js","index.js"],"names":["getStateType","stateObject","includes","type","has","isCompoundState","prependStateNameRecursively","stateName","paths","Array","isArray","map","path","stateNamePart","getChildrenPaths","Object","entries","states","childStateName","childStateObj","childPaths","getStatePaths","flat","results","result","fastCartesian","getAllPossibleMachineDefs","machineDefObj","Infinity","statePath","initial","atomicStateReacher","always","target","root","PseudoStyler","this","styles","registered","WeakMap","uniqueID","a","count","document","styleSheets","length","i","sheet","href","addLink","ownerNode","nodeName","firstChild","addCSS","textContent","text","copySheet","createElement","head","appendChild","cssRules","selectorText","push","removeChild","url","self","Promise","resolve","reject","fetch","then","res","catch","err","element","selector","pseudoClass","replace","RegExp","split","part","matches","ignored","pseudoclass","uuid","customClasses","style","filter","forEach","newSelector","_getCustomSelector","cssText","join","_createStyleElement","cssClass","insertRule","get","set","className","_getMimicClassName","regex","test","deleteRule","delete","classList","remove","substr","force","Map","register","toggle","machines","idle","loading","success","error","createMachine","ButtonPseudoStateCollection","machine","buttonRefs","useRef","useMachine","state","labelText","getLabelText","pseudoClasses","pseudoClassCombinations","_","buttonEls","combArray","ref","el","current","String","data-state","toStrings","useEffect","styler","loadDocumentStyles","values","buttonRef","buttonIndex","isClassActive","classIndex","toggleStyle","statesString","endsWith","ButtonsPreview","buttonPseudoStateCollectionEls","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.03e8d34c.chunk.js","sourcesContent":["import has from 'has';\nimport fastCartesian from 'fast-cartesian';\n\nconst isCompoundState = function isCompoundState(stateObject) {\n  return has(stateObject, 'states');\n};\nconst getStateType = function getStateType(stateObject) {\n  if (['parallel', 'history', 'final'].includes(stateObject.type)) {\n    return stateObject.type;\n  }\n\n  if (isCompoundState(stateObject)) {\n    return 'compound';\n  }\n\n  return 'atomic';\n};\nconst prependStateNameRecursively = function prependStateNameRecursively(\n  stateName,\n  paths\n) {\n  if (Array.isArray(paths)) {\n    return paths.map((path) => prependStateNameRecursively(stateName, path));\n  } else {\n    const stateNamePart = !!stateName ? `${stateName}.` : '';\n    return `${stateNamePart}${paths}`;\n  }\n};\nconst getChildrenPaths = function getChildrenPaths(stateObject, stateName) {\n  return Object.entries(stateObject.states).map(\n    ([childStateName, childStateObj]) => {\n      const childPaths = getStatePaths({\n        stateObject: childStateObj,\n        stateName: childStateName,\n      });\n      return prependStateNameRecursively(stateName, childPaths);\n    }\n  );\n};\nconst getStatePaths = function getStatePaths({\n  stateObject,\n  stateName = null,\n}) {\n  const stateType = getStateType(stateObject);\n\n  switch (stateType) {\n    case 'compound':\n      const resultek = getChildrenPaths(stateObject, stateName);\n      return resultek.flat();\n    case 'parallel':\n      const results = getChildrenPaths(stateObject, stateName).map((result) => {\n        return Array.isArray(result) ? result : [result];\n      });\n      return fastCartesian(results);\n    case 'atomic':\n    default:\n      return stateName;\n  }\n};\n\nconst getAllPossibleMachineDefs = function getAllPossibleMachineDefs(\n  machineDefObj\n) {\n  return getStatePaths({\n    stateObject: machineDefObj,\n  })\n    .map((path) => (Array.isArray(path) ? path.flat(Infinity) : path))\n    .map((statePath) => {\n      return {\n        ...machineDefObj,\n        initial: 'atomicStateReacher',\n        type: 'compound',\n        states: {\n          atomicStateReacher: {\n            always: {\n              target: prependStateNameRecursively('root', statePath),\n            },\n          },\n          root: {\n            type: machineDefObj.type,\n            states: {\n              ...machineDefObj.states,\n            },\n          },\n        },\n      };\n    });\n};\n\nexport default getAllPossibleMachineDefs;\n","class PseudoStyler {\n  constructor() {\n    this.styles = [];\n    this.registered = new WeakMap();\n    this.uniqueID = 0;\n  }\n\n  async loadDocumentStyles() {\n    let count = document.styleSheets.length;\n    for (let i = 0; i < count; i++) {\n      let sheet = document.styleSheets[i];\n      if (sheet.href) {\n        await this.addLink(sheet.href);\n      } else {\n        if (\n          sheet.ownerNode &&\n          sheet.ownerNode.nodeName &&\n          sheet.ownerNode.nodeName === 'STYLE' &&\n          sheet.ownerNode.firstChild\n        ) {\n          this.addCSS(sheet.ownerNode.firstChild.textContent);\n        }\n      }\n    }\n  }\n\n  addCSS(text) {\n    let copySheet = document.createElement('style');\n    copySheet.type = 'text/css';\n    copySheet.textContent = text;\n    document.head.appendChild(copySheet);\n    for (let i = 0; i < copySheet.sheet.cssRules.length; i++) {\n      if (\n        copySheet.sheet.cssRules[i].selectorText &&\n        copySheet.sheet.cssRules[i].selectorText.includes(':')\n      ) {\n        this.styles.push(copySheet.sheet.cssRules[i]);\n      }\n    }\n    document.head.removeChild(copySheet);\n  }\n\n  async addLink(url) {\n    const self = this;\n    await new Promise((resolve, reject) => {\n      fetch(url)\n        .then((res) => {\n          return res.text();\n        })\n        .then((res) => {\n          self.addCSS(res);\n          resolve(self.styles);\n        })\n        .catch((err) => reject(err));\n    });\n  }\n\n  matches(element, selector, pseudoClass) {\n    selector = selector.replace(new RegExp(pseudoClass, 'g'), '');\n    for (let part of selector.split(/ +/)) {\n      try {\n        if (element.matches(part)) {\n          return true;\n        }\n      } catch (ignored) {\n        // reached a non-selector part such as '>'\n      }\n    }\n    return false;\n  }\n\n  register(element, pseudoclass) {\n    let uuid = this.uniqueID++;\n    let customClasses = {};\n    for (let style of this.styles) {\n      if (style.selectorText.includes(pseudoclass)) {\n        style.selectorText\n          .split(/\\s*,\\s*/g)\n          .filter((selector) => this.matches(element, selector, pseudoclass))\n          .forEach((selector) => {\n            let newSelector = this._getCustomSelector(\n              selector,\n              pseudoclass,\n              uuid\n            );\n            customClasses[newSelector] = style.style.cssText\n              .split(/\\s*;\\s*/)\n              .join(';');\n          });\n      }\n    }\n\n    if (!this.style) {\n      this._createStyleElement();\n    }\n    for (let selector in customClasses) {\n      let cssClass = selector + ' { ' + customClasses[selector] + ' }';\n      this.style.sheet.insertRule(cssClass);\n    }\n    this.registered.get(element).set(pseudoclass, uuid);\n  }\n\n  deregister(element, pseudoClass) {\n    if (\n      this.registered.has(element) &&\n      this.registered.get(element).has(pseudoClass)\n    ) {\n      let uuid = this.registered.get(element).get(pseudoClass);\n      let className = this._getMimicClassName(pseudoClass, uuid);\n      let regex = new RegExp(className + '($|\\\\W)');\n      for (let i = 0; i < this.style.sheet.cssRules.length; i++) {\n        if (regex.test(this.style.sheet.cssRules[i].selectorText)) {\n          this.style.sheet.deleteRule(i);\n        }\n      }\n      this.registered.get(element).delete(pseudoClass);\n      element.classList.remove(className.substr(1));\n    }\n  }\n\n  toggleStyle(element, pseudoclass, force) {\n    if (!this.registered.has(element)) {\n      this.registered.set(element, new Map());\n    }\n    if (!this.registered.get(element).has(pseudoclass)) {\n      this.register(element, pseudoclass);\n    }\n    let uuid = this.registered.get(element).get(pseudoclass);\n    element.classList.toggle(\n      this._getMimicClassName(pseudoclass, uuid).substr(1),\n      force\n    );\n  }\n\n  _getMimicClassName(pseudoClass, uuid) {\n    return pseudoClass.replace(':', '.') + '-pseudostyler-' + uuid;\n  }\n\n  _getCustomSelector(selectorText, pseudoClass, uuid) {\n    return selectorText.replace(\n      new RegExp(pseudoClass, 'g'),\n      this._getMimicClassName(pseudoClass, uuid)\n    );\n  }\n\n  _createStyleElement() {\n    let style = document.createElement('style');\n    style.type = 'text/css';\n    document.head.appendChild(style);\n    this.style = style;\n  }\n}\n\nexport default PseudoStyler;\n","import './Button.scss';\nimport getAllPossibleMachineDefs from './getAllPossibleMachineDefs';\nimport { createMachine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport { useEffect, useRef } from 'react';\nimport fastCartesian from 'fast-cartesian';\nimport PseudoStyler from './pseudostyler';\n\nconst machineDef = {\n  initial: 'idle',\n  states: {\n    idle: {},\n    loading: {},\n    success: {},\n    error: {},\n  },\n};\n\nconst machineDefs = getAllPossibleMachineDefs(machineDef);\nconst machines = machineDefs.map(createMachine);\n\nconst ButtonsPreview = function ButtonsPreview() {\n  const buttonPseudoStateCollectionEls = machines.map((machine, i) => (\n    <ButtonPseudoStateCollection machine={machine} key={i} />\n  ));\n  return <div className=\"ButtonsPreview\">{buttonPseudoStateCollectionEls}</div>;\n};\n\nconst ButtonPseudoStateCollection = function ButtonPseudoStateCollection({\n  machine,\n}) {\n  const buttonRefs = useRef([]);\n  const [state] = useMachine(machine);\n  const labelText = getLabelText(state);\n  const pseudoClasses = [':hover', ':active', ':focus'];\n  const pseudoClassCombinations = fastCartesian(\n    pseudoClasses.map((_) => [true, false])\n  );\n  const buttonEls = pseudoClassCombinations.map((combArray, i) => (\n    <button\n      className=\"Button\"\n      ref={(el) => (buttonRefs.current[String(i)] = el)}\n      data-state={state.toStrings().join(' ')}\n      key={i}\n    >\n      {labelText}\n    </button>\n  ));\n  useEffect(() => {\n    (async function togglePseudoStyles() {\n      const styler = new PseudoStyler();\n      await styler.loadDocumentStyles();\n      Object.values(buttonRefs.current).forEach((buttonRef, buttonIndex) => {\n        const pseudoClassValues = pseudoClassCombinations[buttonIndex];\n        pseudoClassValues.forEach((isClassActive, classIndex) => {\n          if (isClassActive) {\n            styler.toggleStyle(buttonRef, pseudoClasses[classIndex]);\n          }\n        });\n      });\n    })();\n    return () => (buttonRefs.current = {});\n  });\n\n  return <div className=\"ButtonPseudoStateCollection\">{buttonEls}</div>;\n};\n\nconst getLabelText = function getLabelText(state) {\n  const statesString = state.toStrings().join(' ');\n  if (statesString.endsWith('idle')) {\n    // return 'Buy now';\n    return 'Idle';\n  } else if (statesString.endsWith('loading')) {\n    // return 'Processing payment...';\n    return 'Loading...';\n  } else if (statesString.endsWith('success')) {\n    // return 'Success!';\n    return 'Success';\n  } else if (statesString.endsWith('error')) {\n    // return 'Payment failed :/';\n    return 'Error';\n  } else {\n    return 'Unrecognized state';\n  }\n};\n\nexport default ButtonsPreview;\n","import ButtonsPreview from './ButtonsPreview';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"content-container\">\n      <ButtonsPreview />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}